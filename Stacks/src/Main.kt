fun main() {
    // Testes da pilha dinâmica

    val s2 = DynamicStack(5)
    println("Pilha vazia? ${s2.isEmpty()}")
    println("Pilha cheia? ${s2.isFull()}")
    println("___________________________")
    s2.print()
    s2.push(1)
    println("topPointer: ${s2.getTopPointer()}")
    println("___________________________")
    s2.push(2)
    println("topPointer: ${s2.getTopPointer()}")
    println("___________________________")
    s2.push(3)
    println("topPointer: ${s2.getTopPointer()}")
    println("___________________________")
    s2.push(4)
    println("topPointer: ${s2.getTopPointer()}")
    println("___________________________")
    s2.push(5)
    println("topPointer: ${s2.getTopPointer()}")
    println("___________________________")
    println("Pilha vazia? ${s2.isEmpty()}")
    println("Pilha cheia? ${s2.isFull()}")
    println("Imprimindo os dados da pilha: ")
    println(s2.print())
    println("___________________________")
    println("Removendo um dado do topo da pilha: ")
    s2.pop()
    println("Imprimindo os dados da pilha: ")
    println(s2.print())
    println("topPointer: ${s2.getTopPointer()}")
    println("___________________________")
    s2.update(10)
    println("Imprimindo os dados da pilha: ")
    println(s2.print())
    println("topPointer: ${s2.getTopPointer()}")
    println("___________________________")


    // Testes da pilha simples/estática
//    val s1 = Stack(5)
//    println("Pilha vazia? ${s1.isEmpty()}")
//    println("Pilha cheia? ${s1.isFull()}")
//    println("___________________________")
//    s1.print()
//
//    // conforme vamos adicionando os itens na pilha, o ponteiro do topo vai aumentando
//    println("Adicionando dados na pilha: ")
//    s1.push(1)
//    println("topPointer: ${s1.getTopPointer()}")
//    println("___________________________")
//    s1.push(2)
//    println("topPointer: ${s1.getTopPointer()}")
//    println("___________________________")
//    s1.push(3)
//    println("topPointer: ${s1.getTopPointer()}")
//    println("___________________________")
//    s1.push(4)
//    println("topPointer: ${s1.getTopPointer()}")
//    println("___________________________")
//    s1.push(5)
//    println("topPointer: ${s1.getTopPointer()}")
//    println("___________________________")
//    println("Imprimindo os dados da pilha: ")
//    println(s1.print())
//    println("Visualizando o array após as operações: ")
//    println(s1.getStack().contentToString())
//    println("___________________________")
//
//    println("Pilha vazia? ${s1.isEmpty()}")
//    println("Pilha cheia? ${s1.isFull()}")
//
//    println("___________________________")
//    // conforme vamos removendo os itens da pilha, o ponteiro do topo vai diminuindo
//    println("Removendo dados da pilha: ")
//    println("Dado no topo da pilha: ${s1.peek()}")
//    println("Dado retirado do topo da pilha: ${s1.pop()}")
//    println("topPointer: ${s1.getTopPointer()}")
//    println("___________________________")
//    println("Dado no topo da pilha: ${s1.peek()}")
//
//    println("___________________________")
//    println("Imprimindo os dados da pilha: ")
//    println(s1.print())
//    println("Visualizando o array após as operações: ")
//    println(s1.getStack().contentToString())
//    println("___________________________")
//    s1.update(10)
//    println("Imprimindo os dados da pilha: ")
//    println(s1.print())

//     Testes da pilha de parênteses em uma expressão
//    val p1 = Parentheses()
//    println("Parênteses válidos? ${p1.checkValidParentheses("(2*(1+(5*2)))")}") // true
//    println("Parênteses válidos? ${p1.checkValidParentheses("(3*(4+2)")}")    // false
}